#!/usr/bin/env python

import sys, socket, select, time, json, random

# Respond to a client's message
def handle_client_message(msgtype, mid, client_address):
	global my_id
	global sock

	# for now send back a failure message
	msg = {'src': my_id, 'dst': client_address, 'leader': 'FFFF', 'type': 'fail', 'MID': mid}
	sock.send(json.dumps(msg))

# Get a random number for the election
# timeout - something between 150 and 300 ms
def get_election_timeout():
	i = random.randint(150, 300)
	
	# want the number to be in ms so
	# divide by 100
	return i / 100

# Check to see if the election timeout
# has occurred
def check_election_timeout(current_time):
	global last_received_rpc
	global election_timeout

	# if a timeout has occurred, begin an election
	if current_time - last_received_rpc >= election_timeout:
		begin_election()

# Begin an election
def begin_election():
	global my_id
	print "Election started by " + my_id

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# The state the replica is in
# this can be leader, follower or candidate
# all start as followers
my_state = "follower"

# Each replica has an election timeout
# which will be a random number between
# 150 and 300 ms
election_timeout = get_election_timeout()

# Keep track of when the last RPC from a
# leader was received, initialize to
# the current time
last_received_rpc = time.time()

# Keep track of the replica's term
# all will start at 0
current_term = 0

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		# For now, send back fail message to get and put calls
		if msg['type'] in ['get', 'put']:
                        handle_client_message(msg['type'], msg['MID'], msg['src'])
		
		# Handle noop messages. This may be removed from your final implementation
		elif msg['type'] == 'noop':
			print '%s received a NOOP from %s' % (msg['dst'], msg['src'])

		# For now, if it is a RPC, reset the last received rpc
		elif msg['type'] == 'request_vote' or msg['type'] == 'append_entries':
			last_received_rpc = time.time()
		
	# Do periodic checks
	clock = time.time()

	# Check if election timeout has occurred
	check_election_timeout(clock)


	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg))
		#print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
